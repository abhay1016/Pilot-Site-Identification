{
  "name": "My workflow 18",
  "nodes": [
    {
      "parameters": {
        "path": "pilot_advisory_combined",
        "options": {
          "rawBody": true,
          "responseData": ""
        }
      },
      "name": "Advisory_Webhook_Handler",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -2020,
        -160
      ],
      "id": "7ebfffd6-1248-480c-8c46-e2e491efe9c6",
      "webhookId": "87472abe-1082-4554-b5c6-a88f0bc97618"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 9 * * 1"
            }
          ]
        }
      },
      "name": "Research_Weekly_Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        -2020,
        20
      ],
      "id": "aab5f362-a258-492c-9d34-9247b1e29ea8"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 8 * * *"
            }
          ]
        }
      },
      "name": "Monitor_Daily_Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        -2020,
        220
      ],
      "id": "1c4b9c5c-f788-4fbb-9b2b-11b401cd2542"
    },
    {
      "parameters": {
        "functionCode": "// Smart Multi-Trigger Router - Fixed Version\nconst workflowId = Date.now().toString();\nconst inputData = $input.first().json;\n\n// Detect trigger type based on input characteristics\nlet triggerType = 'manual';\nlet branch = 'pilot_management';\nlet shouldExecute = true;\n\nif (!inputData || Object.keys(inputData).length === 0) {\n  // Empty input = scheduled trigger\n  // Use current time to distinguish between scheduled triggers\n  const now = new Date();\n  const dayOfWeek = now.getDay(); // 0=Sunday, 1=Monday\n  const hour = now.getHours();\n  \n  if (dayOfWeek === 1 && hour >= 8 && hour <= 11) {\n    // Monday morning = Research trigger\n    triggerType = 'research';\n    branch = 'research_automation';\n  } else {\n    // Other times = Monitor trigger  \n    triggerType = 'monitor';\n    branch = 'system_monitoring';\n  }\n} else if (inputData.body || inputData.headers || inputData.query || inputData.path) {\n  // Has HTTP data = Webhook trigger\n  triggerType = 'webhook';\n  branch = 'advisory_system';\n} else {\n  // Has other data = Manual trigger\n  triggerType = 'manual';\n  branch = 'pilot_management';\n}\n\n// Common data for all branches\nconst commonData = {\n  workflowId: workflowId,\n  timestamp: new Date().toISOString(),\n  triggerType: triggerType,\n  branch: branch,\n  status: 'initiated',\n  shouldExecute: shouldExecute\n};\n\n// Return appropriate branch data\nconst actionMap = {\n  'manual': 'start_pilot_processing',\n  'webhook': 'process_advisory_request', \n  'research': 'generate_weekly_report',\n  'monitor': 'check_system_health'\n};\n\n// Create output for each possible branch\nconst outputs = [];\n\n// Always return data, but mark which branch should execute\nconst branches = ['pilot_management', 'advisory_system', 'research_automation', 'system_monitoring'];\n\nbranches.forEach(branchName => {\n  outputs.push({\n    json: {\n      ...commonData,\n      branch: branchName,\n      action: actionMap[triggerType],\n      isActiveBranch: branchName === branch,\n      execute: branchName === branch,\n      ...(triggerType === 'webhook' && branchName === 'advisory_system' && { requestData: inputData })\n    }\n  });\n});\n\nreturn outputs;"
      },
      "name": "Shared_Workflow_Router",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1720,
        -80
      ],
      "id": "804b8c94-b18f-4494-89cd-c7ef5cbf33f0"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.branch}}",
              "value2": "pilot_management"
            }
          ]
        }
      },
      "name": "Route_To_Pilot_Management",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1500,
        -320
      ],
      "id": "25280282-6f55-4ba0-a490-a76c81c8ce81"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.branch}}",
              "value2": "advisory_system"
            }
          ]
        }
      },
      "name": "Route_To_Advisory_System",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1500,
        -140
      ],
      "id": "3d0e60a6-d910-4ae1-8e9a-8f39a574738a"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.branch}}",
              "value2": "research_automation"
            }
          ]
        }
      },
      "name": "Route_To_Research_Automation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1500,
        60
      ],
      "id": "b700fecb-d61f-4960-90ad-e556ceb64d5f"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.branch}}",
              "value2": "system_monitoring"
            }
          ]
        }
      },
      "name": "Route_To_System_Monitoring",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1500,
        260
      ],
      "id": "5f793215-b483-41e4-8b48-5bdc577f90a6"
    },
    {
      "parameters": {
        "authentication": "airtableTokenApi",
        "operation": "list",
        "application": {
          "__rl": true,
          "value": "https://airtable.com/appsFVksQKPr7diGp/tbl4KHUxVfOYEcjVV/viwETWJENzI15si7r?blocks=hide",
          "mode": "url"
        },
        "table": {
          "__rl": true,
          "value": "tbl4KHUxVfOYEcjVV",
          "mode": "id"
        },
        "additionalOptions": {
          "fields": [
            "id",
            "name",
            "type",
            "city",
            "state",
            "bed_count",
            "annual_imaging_studies",
            "technology_readiness",
            "previous_pilots",
            "contact_email",
            "contact_name"
          ]
        }
      },
      "name": "Pilot_Get_Sites",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 1,
      "position": [
        -800,
        -400
      ],
      "id": "723394fb-2c59-481c-a580-c1d3b96e5cbf",
      "credentials": {
        "airtableTokenApi": {
          "id": "NEKfewzXsEu3S3Xb",
          "name": "Airtable Personal Access Token account 5"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Advisory Expert Assignment Logic\nconst expertMapping = {\n  'business_modeling': 'business_analyst_team',\n  'test_design': 'clinical_team',\n  'implementation': 'tech_implementation_team',\n  'regulatory': 'compliance_team',\n  'pilot_onboarding': 'pilot_coordination_team'\n};\n\nreturn items.map(item => {\n  item.json.assignedExpert = expertMapping[item.json.requestType] || 'general_team';\n  item.json.workflowStage = 'expert_assigned';\n  item.json.priority = item.json.pilotScore > 18 ? 'high' : 'normal';\n  item.json.processedBy = 'advisory_system';\n  return item;\n});"
      },
      "name": "Advisory_Assign_Expert",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1280,
        -160
      ],
      "id": "db96e9fd-d6c4-4e2e-9f62-54d8a11c8a94"
    },
    {
      "parameters": {
        "functionCode": "// Research Data Processing\nconst mockData = {\n  pilot_sites: items[0].json.pilot_sites || [],\n  advisory_sessions: items[0].json.advisory_sessions || [],\n  clinical_data: items[0].json.clinical_data || []\n};\n\n// Anonymize sensitive data\nconst anonymizedData = {\n  pilot_sites: mockData.pilot_sites.map(site => {\n    delete site.contact_info;\n    delete site.sensitive_identifiers;\n    return site;\n  }),\n  research_metrics: {\n    total_sites: mockData.pilot_sites.length,\n    active_sessions: mockData.advisory_sessions.length,\n    data_points: mockData.clinical_data.length\n  }\n};\n\nitems[0].json.anonymizedData = anonymizedData;\nitems[0].json.processedBy = 'research_system';\nreturn items;"
      },
      "name": "Research_Process_Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1240,
        40
      ],
      "id": "405f934c-e8d8-479c-8e60-5f5b84459c72"
    },
    {
      "parameters": {
        "functionCode": "// System Health Monitoring\nconst metrics = {\n  pilot_sites: items[0].json.pilot_sites || 0,\n  advisory_requests: items[0].json.advisory_requests || 0,\n  research_publications: items[0].json.research_publications || 0,\n  system_uptime: items[0].json.system_uptime || 99.9,\n  response_time: items[0].json.avg_response_time || 2.3\n};\n\nitems[0].json.alert = false;\nitems[0].json.alerts = [];\n\nif (metrics.response_time > 5.0) {\n  items[0].json.alert = true;\n  items[0].json.alerts.push('System response time exceeded 5 seconds');\n}\n\nif (metrics.system_uptime < 99.0) {\n  items[0].json.alert = true;\n  items[0].json.alerts.push('System uptime below 99%');\n}\n\nitems[0].json.systemHealth = {\n  status: items[0].json.alert ? 'WARNING' : 'HEALTHY',\n  metrics: metrics,\n  timestamp: new Date().toISOString()\n};\n\nitems[0].json.processedBy = 'monitoring_system';\nreturn items;"
      },
      "name": "Monitor_Check_Health",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1220,
        240
      ],
      "id": "b0cbe8fe-7265-4b30-aa77-b8264adbc5eb"
    },
    {
      "parameters": {
        "channel": "new-channel",
        "text": "=ðŸ”„ Master Workflow Executed\n\nWorkflow ID: {{$json.workflowId}}\nBranch: {{$json.processedBy}}\nStatus: {{$json.status || 'completed'}}\nTimestamp: {{$json.timestamp}}\n\nProcessing completed successfully!",
        "otherOptions": {},
        "attachments": []
      },
      "name": "Shared_Notification_Hub",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        -880,
        -40
      ],
      "id": "0fc08cb3-2250-4ed9-a3f9-82df3c95bf11",
      "credentials": {
        "slackApi": {
          "id": "jMpwVhS0hKQjBKtD",
          "name": "Slack account 3"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Workflow Status Tracker\nconst workflowData = {\n  workflowId: items[0].json.workflowId,\n  branch: items[0].json.processedBy,\n  status: 'completed',\n  timestamp: new Date().toISOString(),\n  executionTime: Date.now() - parseInt(items[0].json.workflowId),\n  success: true\n};\n\n// Log to shared tracking system\nconsole.log('Workflow Completed:', workflowData);\n\nreturn [{\n  json: {\n    ...items[0].json,\n    workflowStatus: workflowData\n  }\n}];"
      },
      "name": "Shared_Status_Tracker",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -680,
        -40
      ],
      "id": "ec645469-46d0-4384-a982-1ab042853fd5"
    },
    {
      "parameters": {
        "functionCode": "// KPI Metrics Collection\nconst mockData = {\n  processing_time: 45,\n  automated_tasks: 8,\n  total_tasks: 10,\n  errors: 1,\n  total_executions: 50,\n  avg_turnaround: 2.5,\n  on_time_reports: 48,\n  total_reports: 50,\n  accuracy_score: 95.5,\n  quality_rating: 4.2,\n  active_pilots: 12,\n  system_capacity: 50,\n  new_adoptions: 3,\n  total_contacts: 20\n};\n\nconst kpiMetrics = {\n  workflow_efficiency: {\n    avg_processing_time: mockData.processing_time,\n    automation_rate: (mockData.automated_tasks / mockData.total_tasks) * 100,\n    error_rate: (mockData.errors / mockData.total_executions) * 100\n  },\n  report_turnaround: {\n    avg_turnaround_hours: mockData.avg_turnaround,\n    sla_compliance: (mockData.on_time_reports / mockData.total_reports) * 100\n  },\n  diagnostic_accuracy: {\n    accuracy_score: mockData.accuracy_score,\n    quality_rating: mockData.quality_rating\n  },\n  scalability: {\n    concurrent_pilots: mockData.active_pilots,\n    system_capacity: mockData.system_capacity,\n    adoption_rate: (mockData.new_adoptions / mockData.total_contacts) * 100\n  }\n};\n\nreturn [{ json: { timestamp: new Date().toISOString(), kpiMetrics } }];"
      },
      "name": "KPI_Metrics_Collector",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1040,
        380
      ],
      "id": "13fcf4c1-a434-4523-8e7e-b81cf4e38ae0"
    },
    {
      "parameters": {
        "functionCode": "// Academic Content Generation\nconst mockPilotData = {\n  pilot_results: [\n    { site: 'University Hospital A', outcome: 'Positive', efficiency_gain: 25 },\n    { site: 'Regional Medical Center B', outcome: 'Positive', efficiency_gain: 18 }\n  ],\n  success_cases: [\n    { case_id: 'CS001', improvement: 'Reduced report time by 40%' },\n    { case_id: 'CS002', improvement: 'Increased accuracy by 15%' }\n  ],\n  lessons: [\n    'Early stakeholder engagement is crucial',\n    'Training requirements vary by institution size'\n  ]\n};\n\nconst academicContent = {\n  case_studies: {\n    pilot_outcomes: mockPilotData.pilot_results,\n    success_stories: mockPilotData.success_cases,\n    lessons_learned: mockPilotData.lessons,\n    total_sites_studied: mockPilotData.pilot_results.length\n  },\n  research_papers: {\n    data_points: mockPilotData.pilot_results.length * 100,\n    statistical_significance: 'p < 0.05',\n    methodology: 'Randomized controlled trial with pre-post analysis'\n  },\n  whitepapers: {\n    best_practices: [\n      'Establish clear success metrics before implementation',\n      'Ensure adequate training for all user groups',\n      'Implement gradual rollout strategy'\n    ],\n    implementation_guide: [\n      'Phase 1: Stakeholder alignment',\n      'Phase 2: Technical setup',\n      'Phase 3: User training',\n      'Phase 4: Go-live and monitoring'\n    ],\n    roi_analysis: {\n      average_roi: '185%',\n      payback_period: '8 months',\n      cost_savings: '$250K annually'\n    }\n  }\n};\n\nreturn [{ json: { ...items[0].json, academicContent } }];"
      },
      "name": "Academic_Publication_Pipeline",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -820,
        380
      ],
      "id": "05302a6d-439b-4b25-b351-52cef38c9ae2"
    },
    {
      "parameters": {
        "functionCode": "// Business Model Advisory Logic\nconst mockBusinessData = {\n  subscription_viability: true,\n  usage_based_viability: true,\n  licensing_viability: false,\n  impl_cost: 150000,\n  ops_cost: 25000,\n  training_cost: 35000,\n  payback_months: 8,\n  npv: 450000,\n  irr: 0.35\n};\n\nconst businessGuidance = {\n  revenue_models: {\n    subscription: mockBusinessData.subscription_viability,\n    per_use: mockBusinessData.usage_based_viability,\n    licensing: mockBusinessData.licensing_viability,\n    recommended: 'Hybrid subscription + per-use model'\n  },\n  cost_analysis: {\n    implementation_cost: mockBusinessData.impl_cost,\n    operational_cost: mockBusinessData.ops_cost,\n    training_cost: mockBusinessData.training_cost,\n    total_first_year: mockBusinessData.impl_cost + mockBusinessData.ops_cost + mockBusinessData.training_cost\n  },\n  roi_projection: {\n    payback_period: mockBusinessData.payback_months,\n    net_present_value: mockBusinessData.npv,\n    internal_rate_return: mockBusinessData.irr * 100,\n    break_even_point: 'Month 8'\n  },\n  risk_assessment: {\n    technical_risk: 'Low',\n    market_risk: 'Medium',\n    regulatory_risk: 'Low',\n    overall_risk: 'Medium-Low'\n  }\n};\n\nreturn [{ json: { ...items[0].json, businessGuidance } }];"
      },
      "name": "Business_Model_Advisor",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -580,
        380
      ],
      "id": "18764a89-6afe-41ea-9d95-0dabd93969f8"
    },
    {
      "parameters": {
        "functionCode": "// Quality Assessment Logic\nconst mockQualityData = {\n  report_completeness: 92,\n  diagnostic_accuracy: 95,\n  delivery_timeliness: 88,\n  report_clarity: 90,\n  clinical_relevance: 93\n};\n\nconst qualityMetrics = {\n  completeness: mockQualityData.report_completeness,\n  accuracy: mockQualityData.diagnostic_accuracy,\n  timeliness: mockQualityData.delivery_timeliness,\n  clarity: mockQualityData.report_clarity,\n  clinical_relevance: mockQualityData.clinical_relevance\n};\n\n// Calculate overall quality score\nconst overallScore = Object.values(qualityMetrics).reduce((sum, score) => sum + score, 0) / Object.keys(qualityMetrics).length;\n\nconst qualityGrade = overallScore >= 90 ? 'Excellent' : \n                   overallScore >= 80 ? 'Good' : \n                   overallScore >= 70 ? 'Satisfactory' : 'Needs Improvement';\n\nconst improvementAreas = [];\nif (qualityMetrics.completeness < 90) improvementAreas.push('Report Completeness');\nif (qualityMetrics.accuracy < 95) improvementAreas.push('Diagnostic Accuracy');\nif (qualityMetrics.timeliness < 90) improvementAreas.push('Delivery Timeliness');\nif (qualityMetrics.clarity < 90) improvementAreas.push('Report Clarity');\nif (qualityMetrics.clinical_relevance < 90) improvementAreas.push('Clinical Relevance');\n\nreturn [{ json: { ...items[0].json, qualityMetrics, overallScore: Math.round(overallScore * 100) / 100, qualityGrade, improvementAreas } }];"
      },
      "name": "Report_Quality_Assessor",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -380,
        380
      ],
      "id": "80be8792-cf0d-42c1-b280-9ed8488bf310"
    },
    {
      "parameters": {
        "functionCode": "// Scalability Analysis\nconst mockScalabilityData = {\n  active_pilots: 12,\n  max_pilots: 50,\n  monthly_growth: 0.15,\n  team_capacity: 'adequate',\n  tech_scalability: 'high'\n};\n\nconst utilizationRate = (mockScalabilityData.active_pilots / mockScalabilityData.max_pilots) * 100;\n\nconst scalabilityMetrics = {\n  current_capacity: {\n    active_pilots: mockScalabilityData.active_pilots,\n    max_concurrent_pilots: mockScalabilityData.max_pilots,\n    utilization_rate: Math.round(utilizationRate * 100) / 100\n  },\n  growth_projections: {\n    monthly_growth_rate: mockScalabilityData.monthly_growth * 100,\n    projected_6_month: Math.round(mockScalabilityData.active_pilots * Math.pow(1 + mockScalabilityData.monthly_growth, 6)),\n    capacity_threshold: mockScalabilityData.max_pilots * 0.8\n  },\n  readiness_assessment: {\n    infrastructure_ready: utilizationRate < 80,\n    team_capacity: mockScalabilityData.team_capacity,\n    technology_scalability: mockScalabilityData.tech_scalability,\n    scaling_recommendation: utilizationRate > 70 ? 'Consider capacity expansion' : 'Current capacity adequate'\n  }\n};\n\nreturn [{ json: { ...items[0].json, scalabilityMetrics } }];"
      },
      "name": "Scalability_Analyzer",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -180,
        380
      ],
      "id": "8850589d-15f2-46e6-9bc6-8a62548d5408"
    },
    {
      "parameters": {
        "functionCode": "// Comprehensive Report Generator\nconst reportData = {\n  executionId: Date.now().toString(),\n  timestamp: new Date().toISOString(),\n  summary: {\n    kpi_status: 'All metrics within acceptable ranges',\n    academic_readiness: 'Ready for publication',\n    business_viability: 'High ROI potential',\n    quality_grade: items[0].json.qualityGrade,\n    scalability_status: items[0].json.scalabilityMetrics.readiness_assessment.scaling_recommendation\n  },\n  detailed_metrics: {\n    kpi: items[0].json.kpiMetrics,\n    academic: items[0].json.academicContent,\n    business: items[0].json.businessGuidance,\n    quality: {\n      overall_score: items[0].json.overallScore,\n      grade: items[0].json.qualityGrade,\n      improvement_areas: items[0].json.improvementAreas\n    },\n    scalability: items[0].json.scalabilityMetrics\n  },\n  recommendations: [\n    'Continue current pilot expansion strategy',\n    'Prepare academic publications for Q2',\n    'Consider scaling infrastructure at 75% capacity',\n    'Focus on improving areas identified in quality assessment'\n  ]\n};\n\nconsole.log('PAP Enhanced Workflow Completed:', reportData.summary);\n\nreturn [{ json: reportData }];"
      },
      "name": "Comprehensive_Report_Generator",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        20,
        380
      ],
      "id": "282676a6-da79-481e-91bf-4c6a464f6bbb"
    },
    {
      "parameters": {
        "operation": "upsert",
        "base": {
          "__rl": true,
          "value": "https://airtable.com/appsFVksQKPr7diGp/tbl4KHUxVfOYEcjVV/viwETWJENzI15si7r?blocks=hide",
          "mode": "url"
        },
        "table": {
          "__rl": true,
          "value": "tbl4KHUxVfOYEcjVV",
          "mode": "id"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "bed_count": 77,
            "name": "krishna",
            "city": "agra",
            "state": "up",
            "contact_email": "22ec3001@rgipt.ac.in",
            "id": "abhay123",
            "type": "patient",
            "annual_imaging_studies": 445,
            "technology_readiness": 678,
            "previous_pilots": 87,
            "contact_name": "abhay"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "type",
              "displayName": "type",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "city",
              "displayName": "city",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "state",
              "displayName": "state",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "bed_count",
              "displayName": "bed_count",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "annual_imaging_studies",
              "displayName": "annual_imaging_studies",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "technology_readiness",
              "displayName": "technology_readiness",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "previous_pilots",
              "displayName": "previous_pilots",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "contact_email",
              "displayName": "contact_email",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "contact_name",
              "displayName": "contact_name",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        -1100,
        -400
      ],
      "id": "5fb4300e-7226-4054-b061-edf4a509f1d7",
      "name": "Create or update a record",
      "credentials": {
        "airtableTokenApi": {
          "id": "NEKfewzXsEu3S3Xb",
          "name": "Airtable Personal Access Token account 5"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Advisory_Webhook_Handler": {
      "main": [
        [
          {
            "node": "Shared_Workflow_Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Research_Weekly_Trigger": {
      "main": [
        [
          {
            "node": "Shared_Workflow_Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Monitor_Daily_Trigger": {
      "main": [
        [
          {
            "node": "Shared_Workflow_Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Shared_Workflow_Router": {
      "main": [
        [
          {
            "node": "Route_To_Pilot_Management",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route_To_Advisory_System",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route_To_Research_Automation",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route_To_System_Monitoring",
            "type": "main",
            "index": 0
          },
          {
            "node": "KPI_Metrics_Collector",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route_To_Advisory_System": {
      "main": [
        [
          {
            "node": "Advisory_Assign_Expert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route_To_Research_Automation": {
      "main": [
        [
          {
            "node": "Research_Process_Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route_To_System_Monitoring": {
      "main": [
        [
          {
            "node": "Monitor_Check_Health",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pilot_Get_Sites": {
      "main": [
        [
          {
            "node": "Shared_Notification_Hub",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Advisory_Assign_Expert": {
      "main": [
        [
          {
            "node": "Shared_Notification_Hub",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Research_Process_Data": {
      "main": [
        [
          {
            "node": "Shared_Notification_Hub",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Monitor_Check_Health": {
      "main": [
        [
          {
            "node": "Shared_Notification_Hub",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Shared_Notification_Hub": {
      "main": [
        [
          {
            "node": "Shared_Status_Tracker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "KPI_Metrics_Collector": {
      "main": [
        [
          {
            "node": "Academic_Publication_Pipeline",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Academic_Publication_Pipeline": {
      "main": [
        [
          {
            "node": "Business_Model_Advisor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Business_Model_Advisor": {
      "main": [
        [
          {
            "node": "Report_Quality_Assessor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Report_Quality_Assessor": {
      "main": [
        [
          {
            "node": "Scalability_Analyzer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scalability_Analyzer": {
      "main": [
        [
          {
            "node": "Comprehensive_Report_Generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route_To_Pilot_Management": {
      "main": [
        [
          {
            "node": "Create or update a record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create or update a record": {
      "main": [
        [
          {
            "node": "Pilot_Get_Sites",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "d7286d6f-470d-4843-9954-b0ca8ba86109",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4f489331cb670003ec9d689d06778a4a537b7818218817673fc887bb6aec46a1"
  },
  "id": "qBoROoBdAZl7RHT8",
  "tags": []
}